#!/bin/bash
# FIXME: Don't use tox to compile requirements. Just pip install pip-tools in pyenv and use pyenv exec. Should be faster.
set -euo pipefail

export CUSTOM_COMPILE_COMMAND="make requirements"
export EXTRA_DEPS="pip-tools"

# The list of Python versions from the .python-version file, as an array
# e.g. py310 py39 py38
# FIXME: Deduplicate this
mapfile -t python_versions < <(pyenv local | cut -d '.' --output-delimiter '' -f1,2 | awk '{print "py" $0}' | tr -d '\000')

for i in "${!python_versions[@]}"; do
    # The Python version that we're currently processing, e.g. py310
    version=${python_versions[$i]}

    # The subdir for the current Python version, e.g. requirements/py310
    dir=requirements/"$version"

    mkdir -p "$dir"

    {
    echo "This \`$dir\` directory was automatically generated by"
    echo '`make requirements`.'
    echo ""
    echo "To change what versions of Python this project supports first change the"
    echo "versions in the \`.python-version\` file then run:"
    echo ""
    echo '```terminal'
    echo "rm -rf requirements/py*"
    echo "make requirements"
    echo '```'
    } > "$dir"/README.md

    # Symlink requirements/py310/tests.in -> ../tests.in and so on.
    for environment in dev tests functests; do
        ln -f -s "../$environment.in" "$dir"
    done

    # Only for the first Python version, more symlinks:
    # requirements/py310/coverage.in -> ../coverage.in and so on.
    if [ "$i" = "0" ]; then
        for environment in coverage format lint; do
            ln -f -s "../$environment.in" "$dir"
        done
    fi

    # Make sure that all the .txt files exist (even if empty) otherwise tox crashes.
    for in_file in "$dir"/*.in; do
        txt_file=$dir/$(basename "$in_file" .in).txt
        touch "$txt_file"
    done

    # Compile prod.txt first because other *.in files import it.
    # Also the command to compile prod.txt is different than the rest.
    tox -e dev --run-command "pip-compile --generate-hashes --output-file $dir/prod.txt setup.cfg"

    # Compile lint.txt after tests.txt and functests.txt because it imports them.
    for environment in coverage dev format functests tests lint; do
        in_file="$dir/$environment.in"
        if test -f "$in_file"; then
            tox -e "$environment" --run-command "pip-compile --generate-hashes $in_file"
        fi
    done
done
