#!/usr/bin/env python
import subprocess
import os
from pathlib import Path
from shutil import rmtree
from functools import lru_cache
from typing import NamedTuple


class PythonVersion(NamedTuple):
    # The full version as used by pyenv, e.g. "3.10.4".
    pyenv_format: str

    @property
    def tox_format(self) -> str:
        """Return this Python version in tox's short format, e.g. "py310"."""
        major, minor, _patch = self.pyenv_format.split(".")
        return f"py{major}{minor}"


def run(command, capture_output=False, env=None):
    """Run command as a subprocess and return its output."""
    result = subprocess.run(command, capture_output=capture_output, check=True, env=env)

    if capture_output:
        result = result.stdout.decode().strip()

    return result


@lru_cache(maxsize=1)
def pyenv():
    """Return the absolute path to the pyenv executable."""
    return run(["which", "pyenv"], capture_output=True)


def pyenv_exec(command, python_version, capture_output=False):
    """Run command in the given python_version with pyenv."""
    env = {key: value for key, value in os.environ.items() if key.startswith("PYENV_")}
    env["PYENV_VERSION"] = python_version.pyenv_format
    env["CUSTOM_COMPILE_COMMAND"] = "make requirements"
    return run([pyenv(), "exec"] + command, capture_output=capture_output, env=env)


def get_python_versions():
    """Return the project's Python versions from the .python_version file."""
    return [
        PythonVersion(line)
        for line in run(["pyenv", "local"], capture_output=True).splitlines()
    ]


def delete_unused_pyxy_subdirs(python_versions):
    """Delete any requirements/pyXY folders that aren't in the .python_version file."""
    tox_formats = [python_version.tox_format for python_version in python_versions]
    for path in Path("requirements").glob("py*"):
        if path.name not in tox_formats:
            rmtree(path)


def create_pyxy_subdir(python_version):
    """Create the requirements/pyXY subdir for `python_version`."""
    (Path("requirements") / python_version.tox_format).mkdir(exist_ok=True)


def create_readme(python_version):
    """Create the requirements/pyXY/README.md file for `python_version`."""
    path = Path("requirements") / python_version.tox_format / "README.md"
    with path.open("w") as readme_file:
        readme_file.writelines(
            [
                f"This `requirements/{python_version.tox_format}` directory was automatically generated by\n",
                "`make requirements`.\n\n",
                "To change what versions of Python this project supports first change the\n",
                "versions in the `.python-version` file then run:\n\n",
                "```terminal\n",
                "make requirements\n",
                "```\n",
            ]
        )


def create_symlinks(python_version, first=False):
    """Create the requirements/pyXY/*.in symlinks for python_version."""
    in_files = ["dev.in", "tests.in", "functests.in"]

    # We only format, lint and measure coverage for the first version of Python.
    if first:
        in_files.extend(["format.in", "lint.in", "coverage.in"])

    for in_file in in_files:
        in_file_path = Path("requirements") / python_version.tox_format / in_file
        in_file_path.unlink(missing_ok=True)
        in_file_path.symlink_to(f"../{in_file}")


def install_pip_tools(python_version):
    """Install pip-tools in pyenv's copy of python_version."""
    pyenv_exec(
        [
            "pip",
            "install",
            "--quiet",
            "--disable-pip-version-check",
            "--upgrade",
            "pip-tools",
        ],
        python_version,
    )


def compile_setup_cfg_file(python_version):
    """
    Compile the setup.cfg file for `python_version`.

    Compile the dependencies from the install_requires setting in setup.cfg
    into the prod.txt file for the given python_version.

    For example setup.cfg -> requirements/py310/prod.txt.
    """
    pyenv_exec(
        [
            "pip-compile",
            "--generate-hashes",
            "--output-file",
            Path("requirements") / python_version.tox_format / "prod.txt",
            "setup.cfg",
        ],
        python_version,
    )


def compile_requirements_in_file(in_file, python_version):
    """
    Compile a requirements/*.in file with a given version of Python.

    For example requirements/py310/tests.in -> requirements/py310/tests.txt.
    """
    path = Path("requirements") / python_version.tox_format / in_file

    if not path.exists():
        return

    pyenv_exec(["pip-compile", "--generate-hashes", path], python_version)


def compile_requirements_in_files(python_version):
    """
    Compile all the requirements/*.in files for a given version of Python.

    For example requirements/py310/*.in -> requirements/py310/*.txt.
    """
    for in_file in [
        "coverage.in",
        "dev.in",
        "format.in",
        "functests.in",
        "tests.in",
        "lint.in",  # Compile lint.in after tests.txt and functests.txt because it imports them.
    ]:
        compile_requirements_in_file(in_file, python_version)


def main():
    python_versions = get_python_versions()
    delete_unused_pyxy_subdirs(python_versions)

    for index, python_version in enumerate(python_versions):
        create_pyxy_subdir(python_version)
        create_readme(python_version)
        create_symlinks(python_version, index == 0)
        install_pip_tools(python_version)
        compile_setup_cfg_file(python_version)
        compile_requirements_in_files(python_version)


if __name__ == "__main__":
    main()
