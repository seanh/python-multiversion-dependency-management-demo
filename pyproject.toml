[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[tool.coverage.run]
branch = true
parallel = true
source = ["python_multiversion_dependency_management_demo", "tests/unit"]

[tool.coverage.report]
show_missing = true
precision = 2
fail_under = 100.00
skip_covered = true

[tool.pydocstyle]
ignore = [
    # Missing docstrings.
    "D100","D101","D102","D103","D104","D105","D106","D107",

    # "No blank lines allowed after function docstring" conflicts with the
    # Black code formatter which insists on inserting blank lines after
    # function docstrings.
    "D202",

    # "1 blank line required before class docstring" conflicts with another
    # pydocstyle rule D211 "No blank lines allowed before class docstring".
    "D203",

    # "Multi-line docstring summary should start at the first line", this
    # conflicts with another pycodestyle rule "Multi-line docstring summary
    # should start at the second line".
    "D212",
]

[tool.pylint.messages_control]
enable = [
    "bad-inline-option",
    "deprecated-pragma",
    "useless-suppression",
    "use-symbolic-message-instead",
]
disable = [
    # Docstrings are encouraged but we don't want to enforce that everything
    # must have a docstring.
    "missing-docstring",

    # We don't always want to have to put a `:return:` in a docstring.

    # We use isort to sort and group our imports, so we don't need PyLint to
    # check them for us.
    "ungrouped-imports",

    # We use Black to format our code automatically, so we don't need PyLint to
    # check formatting for us.
    "line-too-long",

    # We use isort to sort out imports so we don't need PyLint to check import
    # ordering for us.
    "wrong-import-order",

    "too-few-public-methods",

    # Issues to disable this for false positives, disabling it globally in the meantime https://github.com/PyCQA/pylint/issues/214
    "duplicate-code",
]

[tool.pylint.reports]
output-format = "colorized"
score = "no"
